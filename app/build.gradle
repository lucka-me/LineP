apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27
    def newVersionCode = getVersionCode()
    defaultConfig {
        applicationId "labs.zero_one.patroute"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode newVersionCode
        versionName "1.5.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            //minifyEnabled true
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // gson
    //   Reference: https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.8.4'
    // Anko
    //   Reference: https://github.com/Kotlin/anko
    implementation "org.jetbrains.anko:anko:$anko_version"
    // Android-Support-Preference-V7-Fix
    //   Reference: https://github.com/Gericop/Android-Support-Preference-V7-Fix
    implementation 'com.takisoft.fix:preference-v7:27.1.1.1'
    // Apache Commons Net API
    implementation 'commons-net:commons-net:3.6'
    // FABProgressCircle
    //   Reference: https://github.com/JorgeCastilloPrz/FABProgressCircle
    implementation 'com.github.jorgecastilloprz:fabprogresscircle:1.01@aar'
    // AMap API
    implementation 'com.amap.api:3dmap:6.3.1'
}

def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCodeYear = versionProps['VERSION_CODE_YEAR'].toInteger()
        def versionCodeMonth = versionProps['VERSION_CODE_MONTH'].toInteger()
        def versionCodeBuild = versionProps['VERSION_CODE_BUILD'].toInteger()
        def date = new Date()
        if (date.format('MM').toInteger() != versionCodeMonth) {
            versionCodeMonth = date.format('MM').toInteger()
            versionCodeBuild = 0
        }
        if (date.format('yyyy').toInteger() != versionCodeYear) {
            versionCodeYear = date.format('yyyy').toInteger()
            versionCodeBuild = 0
        }
        versionCodeBuild++
        def versionCode = versionCodeYear * 100000 + versionCodeMonth * 1000 + versionCodeBuild
        versionProps['VERSION_CODE_YEAR'] = versionCodeYear.toString()
        versionProps['VERSION_CODE_MONTH'] = versionCodeMonth.toString()
        versionProps['VERSION_CODE_BUILD'] = versionCodeBuild.toString()
        versionProps.store(versionFile.newWriter(), null)
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}